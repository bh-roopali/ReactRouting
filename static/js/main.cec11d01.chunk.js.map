{"version":3,"sources":["logo.svg","Nav.js","Series.js","Movies.js","Action/index.js","Home.js","App.js","serviceWorker.js","Reducer/index.js","index.js"],"names":["module","exports","Nav","navStyle","color","className","style","to","onChange","Series","data","filter","type","map","src","img","marginTop","name","onClick","url","window","open","Movies","add","payload","connect","state","App","path","exact","component","Home","Boolean","location","hostname","match","action","aState","obj","city","push","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,kC,uGCkC5BC,MA9Bf,WACI,IAAMC,EAAW,CACbC,MAAO,SAMb,OACI,6BACH,6BAEI,wBAAIC,UAAU,aACd,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,KACtB,qCAEA,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,WAC1B,uCAEA,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,WAC1B,wCAGJ,2BAAOC,SAAU,kB,OCqBTC,MA5Cf,WAKE,OACE,yBAAKJ,UAAU,cAChBK,EAAKC,QAAO,SAAAD,GAAI,MAAkB,WAAdA,EAAKE,QAAmBC,KAAK,SAAAH,GAAI,OACpD,yBAAKL,UAAU,WACb,yBAAKS,IAAKJ,EAAKK,IAAKV,UAAU,WAG9B,8BAGF,2BAAOC,MAAO,CAACU,UAAW,QAASN,EAAKO,MACxC,4BAAQZ,UAAU,SAASa,QAAS,kBAflBC,EAemCT,EAAKS,SAd1DC,OAAOC,KAAKF,GADd,IAAoBA,IAelB,mBCQWG,MAxBf,WAME,OACE,yBAAKjB,UAAU,cAChBK,EAAKC,QAAO,SAAAD,GAAI,MAAkB,UAAdA,EAAKE,QAAkBC,KAAK,SAAAH,GAAI,OACnD,yBAAKL,UAAU,WACb,yBAAKS,IAAKJ,EAAKK,IAAKV,UAAU,WAG9B,8BAGF,2BAAOC,MAAO,CAACU,UAAW,QAASN,EAAKO,MACxC,4BAAQZ,UAAU,SAASa,QAAS,kBAflBC,EAemCT,EAAKS,SAd1DC,OAAOC,KAAKF,GADd,IAAoBA,IAelB,mB,QCbWI,EARH,SAACb,GAET,MAAO,CACHE,KAAM,MACNY,QAASd,ICkEjB,IAKee,eALS,SAAAC,GACpB,MAAO,CAACH,IAAKG,KAMb,CAACH,OAFUE,EArEf,WAOI,OACI,yBAAKpB,UAAU,cACdK,EAAKG,KAAK,SAAAH,GAAI,OACb,yBAAKL,UAAU,WACb,yBAAKS,IAAKJ,EAAKK,IAAKV,UAAU,WAG9B,8BAGF,2BAAOC,MAAO,CAACU,UAAW,QAASN,EAAKO,MACxC,4BAAQZ,UAAU,SAASa,QAAS,kBAhBtBC,EAgBuCT,EAAKS,SAf5DC,OAAOC,KAAKF,GADhB,IAAoBA,IAgBd,qB,OCCKQ,MAhBf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAQuB,KAAK,IAAIC,OAAK,EAACC,UAAWC,IAClC,kBAAC,IAAD,CAAOH,KAAK,UAAUE,UAAWR,IACjC,kBAAC,IAAD,CAAOM,KAAK,UAAUE,UAAWrB,QCLnBuB,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2D,YCASZ,EAhBH,WAAyB,IAAxBG,EAAuB,uDAAf,GAAIU,EAAW,uCAEhC,OAAOA,EAAOxB,MACV,IAAK,MACD,IAAIyB,EAASX,EACTY,EAAM,CACVrB,KAAMmB,EAAOZ,QAAQP,KACrBsB,KAAMH,EAAOZ,QAAQe,MAGrB,OADAF,EAAOG,KAAKF,GACGD,ICHrBI,EAAQC,YAAYnB,GAE1BoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACjB,kBAAC,EAAD,QAGFK,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cec11d01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n    const navStyle = {\r\n        color: 'white'\r\n    }\r\n\r\n    function onSearch(oEvt) {\r\n\r\n    }\r\n  return (\r\n      <div>\r\n   <nav>\r\n       {/* <h3>Logo</h3> */}\r\n       <ul className=\"nav-links\">\r\n       <Link style={navStyle} to=\"/\">\r\n           <li>Home</li>\r\n           </Link>\r\n           <Link style={navStyle} to=\"/movies\">\r\n           <li>Movies</li>\r\n           </Link>\r\n           <Link style={navStyle} to=\"/series\">\r\n           <li>Series</li>\r\n           </Link>\r\n       </ul>\r\n       <input onChange={() => onSearch()}></input>\r\n   </nav>\r\n  \r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport data from './data/data.json'\r\n\r\nfunction Series() {\r\n  function onWatchnow(url) {\r\n    window.open(url)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mainDivCSS\">\r\n  {data.filter(data => data.type === 'series').map( data => \r\n    <div className=\"cardCss\">\r\n      <img src={data.img} className=\"imgCSS\"></img>\r\n      {/* <img src='img1.png' className=\"imgCSS\" /> */}\r\n      \r\n      <div >\r\n\r\n      </div>\r\n    <label style={{marginTop: '5px'}}>{data.name}</label>\r\n    <button className=\"btnCSS\" onClick={() => onWatchnow(data.url)}>Watch Now</button>\r\n    </div>)}\r\n    </div>\r\n  )\r\n\r\n  // series = data.map( data => {\r\n  //   if(data.type === 'series') {\r\n  //     return (\r\n  //       <div className=\"mainDivCSS\">\r\n  //       <div className=\"cardCss\">\r\n  //         <img src={data.img} className=\"imgCSS\"></img>\r\n          \r\n  //         <div >\r\n    \r\n  //         </div>\r\n  //       <label style={{marginTop: '5px'}}>{data.name}</label>\r\n  //       <button className=\"btnCSS\" onClick={() => onWatchnow(data.url)}>Watch Now</button>\r\n  //       </div>\r\n    \r\n  //       </div>\r\n  //     )\r\n  //   } else{\r\n  //     return;\r\n  //   }\r\n  // })\r\n \r\n}\r\n\r\nexport default Series;","import React from 'react';\r\nimport './App.css';\r\nimport data from './data/data.json';\r\n\r\nfunction Movies() {\r\n\r\n  function onWatchnow(url) {\r\n    window.open(url)\r\n  }\r\n  \r\n  return (\r\n    <div className=\"mainDivCSS\">\r\n  {data.filter(data => data.type === 'movie').map( data => \r\n    <div className=\"cardCss\">\r\n      <img src={data.img} className=\"imgCSS\"></img>\r\n      {/* <img src='img1.png' className=\"imgCSS\" /> */}\r\n      \r\n      <div >\r\n\r\n      </div>\r\n    <label style={{marginTop: '5px'}}>{data.name}</label>\r\n    <button className=\"btnCSS\" onClick={() => onWatchnow(data.url)}>Watch Now</button>\r\n    </div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Movies;","const add = (data) => {\r\n   \r\n    return {\r\n        type: 'ADD',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport default add","import React from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport add from './Action'\r\nimport { connect } from 'react-redux'\r\nimport data from './data/data.json'\r\n\r\nfunction Home(){\r\n    \r\n    function onWatchnow(url) {\r\n        window.open(url)\r\n      }\r\n      \r\n\r\n    return(\r\n        <div className=\"mainDivCSS\">\r\n        {data.map( data => \r\n          <div className=\"cardCss\">\r\n            <img src={data.img} className=\"imgCSS\"></img>\r\n            {/* <img src='img1.png' className=\"imgCSS\" /> */}\r\n            \r\n            <div >\r\n      \r\n            </div>\r\n          <label style={{marginTop: '5px'}}>{data.name}</label>\r\n          <button className=\"btnCSS\" onClick={() => onWatchnow(data.url)}>Watch Now</button>\r\n          </div>)}\r\n          </div>\r\n    )\r\n}\r\n// class Home extends React.Component{\r\n\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state={\r\n//             name: '',\r\n//             city: ''\r\n//         }\r\n//         this.onAdd = this.onAdd.bind(this)\r\n//     }\r\n\r\n//     onAdd(event) {\r\n//     event.preventDefault();\r\n//     var name = document.getElementById('idName').value\r\n//     var city = document.getElementById('idCity').value\r\n//     this.props.add({name,city})\r\n//     }\r\n      \r\n//     render(){\r\n//         console.log(this.props)\r\n//         const formStyle = {\r\n//             display: 'flex',\r\n//     flexDirection: 'column',\r\n//     width: '50%'\r\n//         }\r\n//         return(\r\n\r\n//             <div>\r\n//                 <form style={formStyle} onSubmit={this.onAdd}>\r\n//                     <label>Name</label>\r\n//                     <input id=\"idName\"></input>\r\n//                     <label>City</label>\r\n//                     <input id=\"idCity\"></input>\r\n//                     <input type=\"submit\" value=\"Add\"></input>\r\n                    \r\n//                 </form>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = state => {\r\n    return {add: state}\r\n} \r\n\r\n//export default Home\r\nexport default connect(\r\n    mapStateToProps,\r\n    {add}\r\n)(Home)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Nav from './Nav'\nimport Series from './Series'\nimport Movies from './Movies'\nimport Home from './Home'\nimport {BrowserRouter as Roueter, Switch, Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Roueter>\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n      <Route  path=\"/\" exact component={Home} />\n      <Route path=\"/movies\" component={Movies} />\n      <Route path=\"/series\" component={Series} />\n      </Switch>\n    </div>\n    </Roueter>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\n\r\nconst add = (state = [], action) => {\r\n\r\n    switch(action.type){\r\n        case 'ADD' : {\r\n            let aState = state\r\n            let obj = {\r\n            name: action.payload.name,\r\n            city: action.payload.city\r\n            }\r\n            aState.push(obj)\r\n            return state = aState\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default add","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport add from './Reducer'\nimport {Provider} from 'react-redux'\n\nconst store = createStore(add)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}